;;; md-config.el

(add-hook 'markdown-mode-hook 'psv/md-eww-live-preview)

(defun psv/md-eww-live-preview ()
  (make-local-variable 'after-change-functions)
  (add-hook 'after-change-functions 'psv/markdown-export-and-preview))

(defun psv/markdown-export (&optional output-file)
  "Run Markdown on the current buffer, save to file, and return the filename.
If OUTPUT-FILE is given, use that as the filename.  Otherwise, use the filename
generated by `markdown-export-file-name', which will be constructed using the
current filename, but with the extension removed and replaced with .html."
  (interactive)
  (unless output-file
    (setq output-file (markdown-export-file-name ".html")))
  (when output-file
    (let* ((init-buf (current-buffer))
           (init-point (point))
           (init-buf-string (buffer-string))
           (output-buffer (find-file-noselect output-file))
           (output-buffer-name (buffer-name output-buffer)))
      (run-hooks 'markdown-before-export-hook)
      (markdown-standalone output-buffer-name)
      (with-current-buffer output-buffer
        (run-hooks 'markdown-after-export-hook)
        (save-buffer))
      ;; if modified, restore initial buffer
      ;; (when (buffer-modified-p init-buf)
      ;;   (erase-buffer)
      ;;   (insert init-buf-string)
      ;;   (save-buffer)
      ;;   (goto-char init-point))
      output-file)))

(defun psv/markdown-export-and-preview (&rest ignored)
  (let ((html (psv/markdown-export))
        (md (current-buffer)))
    (switch-to-buffer-other-window "*eww*")
    (eww-open-file html)
    (switch-to-buffer-other-window md)))

(provide 'md-config)
